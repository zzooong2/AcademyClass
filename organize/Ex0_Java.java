package kr.co.organize;

public class Ex0_Java {
	
	/*
		
		< 변수 >
		- 어떠한 값을 저장하는 공간
		
		[변수의 선언]
		- 변수를 사용하기 위해 만드는 과정
		- 변수가 사용할 메모리 공간을 확보하는 과정 
		  String name;
		  boolean isTrue;
		  
		[변수의 초기화]
		- 변수의 공간에 값(리터럴)을 저장하는 행위
		  name = "김현중";
		  isTrue = true; 
		
		[변수의 명시적 초기화]
		- 변수를 선언함과 동시에 값(리터럴)을 저장하는 행위
		  String color = "Red";
		
		[기본형 변수]
		1. 논리형
		- boolean : 1byte 크기를 가진 자료형 (true or false)
		- CPU 접근 최소단위 = 1byte
		
		2. 문자형
		- char : 2byte 크기를 가진 자료형으로, 문자 한글자를 작은 따표로 감싸서 표현
		         char grade = 'A';    
		
		3. 정수형
		- byte : 1byte 크기를 가진 자료형
		- short : 2byte 크기를 가진 자료형
		- int : 4byte 크기를 가진 자료형
		- long : 8byte 크기를 가진 자료형 (값 뒤에 L 을 붙여줘야 함 -> int가 default)
		
		4. 실수형
		- float : 4byte 크기를 가진 자료형 (소수점 7자리, 값 뒤에 f를 붙여줘야 함)
		- double : 4byte 크기를 가진 자료형 (소수점 15자리) 
		- 컴터 메모리 구조상 소수점을 가진 숫자는 계산을 100% 완벽하게 수행할 수 없다.
		
		< 상수 >
		- final 키워드를 이용하여 선언
		- 선언된 값은 절대 변하지 않음
		- 대문자를 이용하여 변수명을 작성하고, 단어 사이에는 언더바를 사용
		  final String MEMBER_NAME = "현중";
		
		
	  	< 네이밍 규칙 >
      	- 대소문자 구별
      	- 관례적으로 카멜 표기법(낙타 표기법)을 사용
      	  user + name  ->  userName
      
      
      	< 형변환 >            
      	[자동 형변환]
      	- 작은 자료형에서 큰 자료형으로 데이터 타입을 변경하면 데이터 손실의 위험이 없기 때문에 자동으로 데이터 타입이 변경 됌
	  	- 크기가 작은 자료형 -> 크기가 큰 자료형 : 자동 형변환
      
      	[강제 형변환]
      	- 큰 자료형에서 작은 자료형으로 데이터 타입을 변경하면 데이터 손실의 위험이 있기 때문에 자동으로 되지 않음
      	- 이런 경우에는 개발자가 강제로 데이터 타입을 변경 해주어야 함
      	- 크기가 큰 자료형 -> 크기가 작은 자료형 : 강제 형변형
	*/
	
}

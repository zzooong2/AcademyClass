package kr.co.organize;

public class Ex5_Object_Oriented_Programming {
	
	/*
		
		< 객체 지향 프로그래밍 OOP >
		- 프로그래밍에서 필요한 데이터들을 추상화 시켜 객체를 만들고, 객체간 상호작용을 통해 프로그램을 구현하는 패러다임
		
		[캡슐화 - Encapsulation]
		- 변수와 메서드를 클래스로 묶어 독립적으로 동작하지 않도록 하는 행위
		- 접근제한자도 캡슐화의 개념
			1. 객체의 내부 구현을 외부로부터 숨김 (정보의 은닉)
			2. 객체의 내부 상태를 제어하고, 잘못된 접근으로부터 보호
			3. 유지보수 편리
		
		[상속 - Inheritance]
		- 부모 클래스가 가지고 있는 것을 자식 클래스가 물려받아 확장하는 개념
			1. 기존에 작성된 클래스 재활용 가능
			2. 코드의 중복을 최소화
			3. 유지보수 편리
			4. 다형성 구현 가능
		
		[추상화 - Abstraction]
		- 구체적인 사실들을 일반화시켜 기술하는 개념
		- 필요한 공통점을 추출하고 불필요한 공통점을 제거하는 과정
			1. 복잡한 시스템 단순화
		
		[다형성 - Polymorphism]
		- 여러가지 형태를 가질 수 있는 개념 (오버로딩, 오버라이딩)
			1. 코드의 재사용성을 높이고, 중복을 최소화
		 	2. 계층적인 구조를 통해 객체 간의 관계를 나타낼 수 있음
		
		
	*/
	
}
